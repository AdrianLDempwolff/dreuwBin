#!/usr/bin/env python3
# vi: set et ts=4 sw=4 sts=4:

# Script to provide user interface for qchem jobscript generation
# Copyright (C) 2015-17 Michael F. Herbst
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# A copy of the GNU General Public License can be found in the 
# file LICENCE or at <http://www.gnu.org/licenses/>.

from queuing_system import jobscript_builder as jsb
from queuing_system import queuing_system_data as qd
from queuing_system import queuing_system_environment as qe
from queuing_system.qsys_line import qsys_line
from queuing_system.guess_queuing_system import guess_queuing_system
import os.path
import subprocess
import shared_utils_lib as utils

#########################################################
#-- General stuff --#
#####################

class QChemPathNotDeterminedError(Exception):
    def __init__(self):
        super().__init__()

def determine_qchem_path(version_string=None):
    """
        run the selection script and return the qchem path

        version_string: The string to pass to qchem-vselector as the 
        readily known version string

        raises a subprocess.CalledProcessError exception if there 
        is anything wrong.
    """
    selector_prog="qchem-vselector"

    try:
        if version_string is not None:
            byte_str = subprocess.check_output([selector_prog,"--version", version_string])
        else:
            byte_str = subprocess.check_output(selector_prog)
        return byte_str.decode(encoding='utf-8').strip()
    except subprocess.CalledProcessError as e:
        raise QChemPathNotDeterminedError(e.argv[0])
    except UnicodeDecodeError as e:
        raise QChemPathNotDeterminedError(e.argv[0])

#########################################################
#--  QChem 4.0  --#
###################

class qchem_args():
    def __init__(self):
        self.infile=None #str, path to the Q-Chem input file
        self.outfile=None #str or None, Q-Chem Output filename
        self.save_flag=None #bool, should the -save option be passed to Q-Chem
        self.savedir=None #str or None, the directory to use as the qchem savedir
        self.np_flag=None #bool, should the -np option be passed to Q-Chem instead of the -nt flag
        self.qchem_executable=None #str, Q-Chem executable to use
        self.use_perf=None #bool, should perf or time be used to monitor the Q-Chem run

class qchem_payload(jsb.hook_base):

    def __init__(self,args):
        if not isinstance(args,qchem_args):
            raise TypeError("args should be of type " + str(type(qchem_args)))
        self.__qchem_args = args

    def generate(self,data,params,calc_env):
        """
        Generate shell script code from the queuing_system_data,
        the queuing_system_params and the calculation_environment
        provided
        """
        if not isinstance(data,qd.queuing_system_data):
            raise TypeError("data not of type qd.queuing_system_data")

        if not isinstance(params,qe.queuing_system_environment):
            raise TypeError("params not of type qe.queuing_system_environment")

        if not isinstance(calc_env,jsb.calculation_environment):
            raise TypeError("calc_env not of type calculation_environment")

        qchem_args = self.__qchem_args

        args=""
        if qchem_args.save_flag:
            args += " -save"
        if data.no_procs() > 1:
            if qchem_args.np_flag:
               args += " -np " + str(data.no_procs())
            else:
               args += " -nt " + str(data.no_procs())

        args += ' "' + qchem_args.infile + '"'
        if qchem_args.outfile is not None:
            args += ' "' + qchem_args.outfile + '"'
        if qchem_args.savedir is not None:
            args += ' "' + qchem_args.savedir + '"'


        # Test if QCAUX and QC exist

        string = 'export QCSCRATCH="$' + calc_env.node_scratch_dir + '"\n'

        if qchem_args.use_perf:
            string += "if which perf &> /dev/null; then\n"
            string += "    perf " + qchem_args.qchem_executable + args + '\n'
            string += "    "+ calc_env.return_value + '=$?\n'
            string += "else\n"
            string += "    /usr/bin/time -v " + qchem_args.qchem_executable + args + '\n'
            string += "    "+ calc_env.return_value + '=$?\n'
            string += "fi\n"
        else:
            string += qchem_args.qchem_executable + args + '\n'
            string += calc_env.return_value + '=$?\n'
        string += "\n"

        string += "# check if job terminated successfully\n" \
                + 'if ! grep -q "Thank you very much for using Q-Chem.  Have a nice day." "' \
                + qchem_args.outfile + '"; then\n' \
                + '    ' + calc_env.return_value +'=1\n' \
                + 'fi\n'

        if qchem_args.savedir is not None:
            string += "\necho\n"
            string += "echo ------------------------------------------------------\n"
            string += "echo\n\n"

            string += 'echo "Files in $QCSCRATCH/'+qchem_args.savedir+ '": \n'
            string += '(\n'
            string += '    cd "$QCSCRATCH/' +qchem_args.savedir+ '"\n'
            string += "    ls -l | sed 's/^/    /g' \n"
            string += ')\n'

        return string

class qchem_script_builder(jsb.jobscript_builder):
    """
    Class to build a job script for Q-Chem
    """

    def __init__(self,qsys):
        super().__init__(qsys)
        self.__files_copy_in=None  # files that should be copied into the workdir
        self.__files_copy_work_out=None  # files that should be copied out of the workdir on successful execution
        self.__files_copy_scratch_out=None  # files that should be copied out of the scratchdir on successful execution
        self.__files_copy_error_out=None # files that should be copied out of the workdir on 
        self.__qchem_args=None
        self.program_name = "Q-Chem"

    @property
    def qchem_args(self):
        return self.__qchem_args

    @qchem_args.setter
    def qchem_args(self,val):
        if not isinstance(val,qchem_args):
            raise TypeError("val should be of type " + str(type(qchem_args)))
        self.__qchem_args = val

    def add_entries_to_argparse(self,argparse):
        """
        Adds required entries to an argparse Object supplied
        """
        super().add_entries_to_argparse(argparse)

        argparse.add_argument("infile",metavar="infile.in", type=str, help="The path to the Q-Chem input file")
        argparse.add_argument("--out",metavar="file",default=None,type=str, help="Q-Chem Output filename (Default: infile + \".out\")")
        argparse.add_argument("--save",default=False, action='store_true', help="Pass the -save option to qchem.")
        argparse.add_argument("--savedir", metavar="dir", default=None, type=str, help="The directory to use as the qchem savedir")
        argparse.add_argument("--np-to-qchem", default=False,action='store_true',help="Instead of passing the -nt option to Q-Chem on parallel runs, pass the -np option followed by the number of processors to qchem (for MPI runs).")
        argparse.add_argument("--version", default=None, type=str, help="Version string identifying the Q-Chem version to be used.")
        argparse.add_argument("--perf", default=False, action='store_true',help="Use time or perf to montitor the memory/cpu usage of Q-Chem.")

        epilog="The script tries to complete parameters and information which are not \n" \
                + "explicitly provided on the commandline using the infile.in input \n" \
                + "file. This includes: \n" \
                + "   - jobname (Name of the file), \n" \
                + "   - output file name, \n" \
                + "   - number of processors (using threads) \n" \
                + "   - physical and virtual memory (using memstatic and memtotal)\n" \
                + "\nFurthermore QSYS directives are available in the orca input file\n" \
                + "to further set the following properties:\n"

        for k in qsys_line.available_directives:
            epilog += "   !QSYS " + k + "= <value>     set " \
                    + qsys_line.available_directives[k] + " to <value>\n"

        if argparse.epilog is None:
            argparse.epilog = epilog
        else:
            argparse.epilog += ("\n" + epilog)

    def _qchem_work_files(self):
        """
        Returns a list of possible files which are generated
        by this qchem job.
        """
        # The ret list should be filled with files to be copied.
        # Note that existance is checked automatically, i.e.
        # if a file is listed here, but is not created by qchem
        # or does not exist after the run, no error is produced.
        ret=[]

        if self.__qchem_args.outfile is not None:
            ret.append(self.__qchem_args.outfile)

        # Copy fchk file:
        ret.append(self.__qchem_args.infile + ".fchk")

        # TODO possible other ideas:
        # plot.attach.alpha
        # plot.detach.alpha
        # plot.attach.beta
        # plot.detach.beta
        # plot.attach.rlx.alpha
        # plot.detach.rlx.alpha
        # plot.attach.rlx.beta
        # plot.detach.rlx.beta
        # plot.trans
        # plot.hf
        # plot.mo
        # AIMD (directory)

        return ret

    def _qchem_scratch_files(self):
        """
        Returns a list of possible files which should be kept
        if they are generated in the scratch directory
        """
        ret=[]

        # Copy plots:
        if self.__qchem_args.savedir:
            ret.append(self.__qchem_args.savedir + "/plots")

        return ret

    def _parse_infile(self,infile):
        """
        Update the inner data using the infile provided. If the values conflict, the
        values are left unchanged.
        """
        data = self.queuing_system_data

        # Qsys lines for later parsing:
        qsyslines=[]

        section=None # the section we are currently in
        with open(infile,'r') as f:
            for line in f:
                line = line.strip()

                if line.startswith("!QSYS"):
                    qsyslines.append(line[5:])

                # NOTE:
                # From here on everything is normalised to lower case!
                line = line.lower()

                if line.startswith("$end"):
                    section=None
                    continue

                if section is None:
                    if line.startswith("$molecule"):
                        section="molecule"
                        continue

                    if line.startswith("$rem"):
                        section="rem"
                        continue

                elif section == "molecule":
                    if line.startswith("read"):
                        line = line[4:].strip()
                        self.__files_copy_in.append(line)
                    continue

                elif section == "rem":
                    if line.startswith("threads"):
                        line = line[7:].strip()

                        no=0
                        try:
                            no = int(line)
                        except ValueError:
                            continue

                        if data.no_procs() < no:
                            # we have less processors than threads requested
                            node = qd.node_type()
                            node.no_procs = no - data.no_procs()
                            data.add_node_type(node)

                        continue

                    if line.startswith("mem_total"):
                        # memory in mb
                        line = line[9:].strip()

                        no=0
                        try:
                            no = int(line)
                        except ValueError:
                            continue

                        # Q-Chem does not honour the mem_total value properly
                        # so therefore we add a fixed offset to the value in
                        # the input file
                        no += 50 # Add 50mb

                        if data.physical_memory is None:
                            data.physical_memory = no*1024*1024 #value is in MB
                        if data.virtual_memory is None:
                            data.virtual_memory = no*1024*1024 #value is in MB
                        continue
                # end if
            # end for

        # Parse qsys lines
        for line in qsyslines:
            qsys_line(line).parse_into(data)

    def examine_args(self,args):
        """
        Update the inner data using the argparse data
        i.e. if there are conflicting values, the commandline takes
        preference

        If we find a flag to parse extra commandline args (-q, --qsys-args)
        invoke parsing of those arguments as well. Note that these explicitly
        provided arguments overwrite everything else on the commandline
        """
        super().examine_args(args)

        # check parsed data for consistency
        if not os.path.isfile(args.infile):
            raise SystemExit("File not found: " + args.infile)

        if args.save and args.savedir is None:
            raise SystemExit("If --save is provided a --savedir has to be set")

        if  args.savedir is not None and args.savedir.count("/") > 0:
            raise SystemExit("The savedir given should not be a path, just a name")

        # set internal values:
        self.__qchem_args = qchem_args()
        self.__qchem_args.infile=args.infile
        self.__qchem_args.save_flag=args.save
        self.__qchem_args.savedir = args.savedir
        self.__qchem_args.np_flag=args.np_to_qchem
        self.__qchem_args.use_perf = args.perf

        if args.version is not None:
            try:
                self.__qchem_args.qchem_executable = determine_qchem_path(version_string=args.version)
            except QChemPathNotDeterminedError as e:
                raise SystemExit("Invalid Q-Chem version string passed via --version: " + args.version)
        else:
            try:
                self.__qchem_args.qchem_executable = determine_qchem_path()
            except QChemPathNotDeterminedError as e:
                raise SystemExit("Could not determine Q-Chem version to use.")

        # split .in extension from filename
        filename, extension =  os.path.splitext(self.__qchem_args.infile)
        if not extension in [ ".in", ".qcin" ]:
            filename = self.__qchem_args.infile

        # set outfile if not provided:
        if args.out is None:
            self.__qchem_args.outfile= filename + ".out"
        else:
            self.__qchem_args.outfile=args.out

        # set jobname if not yet set:
        if self.queuing_system_data.job_name is None:
            self.queuing_system_data.job_name = filename

        # files to copy in
        self.__files_copy_in =[]
        self.__files_copy_in.append(self.__qchem_args.infile)

        # parse infile 
        self._parse_infile(self.__qchem_args.infile)

        # File to copy out from working directory of node
        # on succesful execution.
        self.__files_copy_work_out=self._qchem_work_files()

        # Files to copy out from scratch directory of node
        # on successful execution
        self.__files_copy_scratch_out=self._qchem_scratch_files()

        # Files to copy out from working directory of node
        # if an error occurrs
        self.__files_copy_error_out=[ self.__qchem_args.outfile ]

    def build_script(self):
        if self.__qchem_args.qchem_executable is None:
            raise jsb.DataNotReady("No path to a Q-Chem wrapper script provided.")

        if self.__qchem_args.outfile is None:
            raise jsb.DataNotReady("No outputfile provided")

        if self.__qchem_args.save_flag and self.__qchem_args.savedir is None:
            raise jsb.DataNotReady("If save_flag is set, we need a savedir as well")

        self.add_payload_hook(jsb.copy_in_hook(self.__files_copy_in),-1000)
        self.add_payload_hook(qchem_payload(self.__qchem_args))

        # Hook to copy files workdir of node -> submitdir
        self.add_payload_hook(jsb.copy_out_hook(self.__files_copy_work_out, fromdir="WORK"),900)

        # Hook to copy files scratchdir of node -> submitdir
        self.add_payload_hook(jsb.copy_out_hook(self.__files_copy_scratch_out, fromdir="SCRATCH"),1000)

        self.add_error_hook(jsb.copy_out_hook(self.__files_copy_error_out),-1000)

        return super().build_script()

#########################################################
#-- main --#
############

def main():
    # Guess the queuing system and start the buider
    qsys=guess_queuing_system()
    jsb.builder_main(qchem_script_builder(qsys),qsys)

if __name__ == "__main__":
    main()

