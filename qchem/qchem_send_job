#!/usr/bin/env python3
# vi: set et ts=4 sw=4 sts=4:

# Script to provide user interface for qchem jobscript generation
# Copyright (C) 2015 Michael F. Herbst
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# A copy of the GNU General Public License can be found in the 
# file LICENCE or at <http://www.gnu.org/licenses/>.

import argparse
from queuing_system.pbs import pbs
from queuing_system.jobscript_builder import jobscript_builder, hook_base, DataNotReady, ParseConfigError
from qchem.qchem_script_builder import v40 as qchem_builder
from qchem.qchem_script_builder import QChemPathNotDeterminedError, determine_qchem_path

#-----------------------------------------------------------------

# setup parser:
parser = argparse.ArgumentParser(description='Script to send qchem jobs')
parser.add_argument("--cfg", metavar="configfile", default=None,type=str,help="Use this alternatve config file as sendscript config")
parser.add_argument("--send",default=False, action='store_true', help="Send the job once the jobscript has been written.")

# setup script builder:
qsys=pbs()
jsb=qchem_builder(qsys)
jsb.add_entries_to_argparse(parser)

# parse args and config:
args = parser.parse_args()

try:
    if args.cfg is not None:
        jsb.parse_config(cfg=args.cfg,autocreate=False)
    else:
        jsb.parse_config()
except ParseConfigError as pe:
    raise SystemExit("When parsing the config: " + pe.args[0])

jsb.examine_args(args)

if jsb.qchem_args.qchem_executable is None:
    # no executable determined so far ==> ask user
    try:
        jsb.qchem_args.qchem_executable = determine_qchem_path()
    except QChemPathNotDeterminedError as e:
        raise SystemExit("Could not determine Q-Chem version to use.")

# write script
scriptname=args.infile +  ".sh"
if jsb.queuing_system_data.job_name is not None:
    scriptname=jsb.queuing_system_data.job_name + ".sh"

try:
    with open(scriptname,"w") as f:
        f.write(jsb.build_script())
except DataNotReady as dnr:
    raise SystemExit("Missing data: " + dnr.args[0])


if args.send:
    qsys.submit_script(scriptname)
